<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <title>FiveM-Osint</title>
</head>
    <body>
        <div class="navbar">
            <h1>Fivem-Osint Tool.</h1>
        </div>
        <div class="main">
            <div class="input">
                <p>Cfx.re code or the server's address (IP:Port)</p>
                <input id="inputText">
                <button onclick="handleSubmit()">Find</button>
            </div>
            <div class="data">
                <div class="top">
                    <h1 id="label"></h1>
                    <img src="" alt="" id="banner">
                </div>
                <div class="bottom">
                    <div class="smallBoxes">
                        <div class="smallBox">
                            <h1>Info:</h1>
                            <p>Hostname: <span id="hostName"></span></p>
                            <p>Endpoint: <span id="endpoint"></span></p>
                            <p>Player count: <span id="playerCount"></span></p>
                        </div>
                        <div class="smallBox">
                            <h1>Owner:</h1>
                            <div class="owner">
                                <img src="" alt="" id="ownerAvatar">
                                <div class="ownerText">
                                    <p>Owner name: <span id="ownerName"></span></p>
                                    <p>Owner profile: <a href="" id="ownerProfile"></a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="bigBox">
                        <h1>Players:</h1>
                        <div class="subHeaders">
                            <h1>Player:</h1>
                            <h1>Discord:</h1>
                            <h1>Steam:</h1>
                        </div>
                        <ul class="bigBoxList" id="playerList">
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <p id="footer">FiveM-Osint Tool was developed with learning in mind and is not affiliated with Cfx.re. All the data is fetched from open sources | Creator: <a href="https://github.com/Vilska">Vilska</a></p>
    </body>
    <script>
        let generalData = []
        let playerData = []

        const handleSubmit = (e) => {
            generalData = []
            playerData = []
            console.log(playerData)

            let inputBox = document.getElementById("inputText")
            var inputValue = inputBox.value
            fetchFivemData(inputValue)
        }
        
        const fetchFivemData = (value) => {
            fetch(`https://servers-frontend.fivem.net/api/servers/single/${value}`)
            .then((res) => {
                return res.json()
             })
            .then((data) => {
                const finalData = data.Data

                serverData(finalData)

                ownerData(finalData)

                playersData(finalData.players)

                setTimeout(() => {
                    dataRender({generalData, playerData})
                }, 2000)
            })
        }

        const dataRender = (data) => {

            let label = document.getElementById("label")
            let banner = document.getElementById("banner")

            label.innerText = data.generalData[0].serverLabel
            banner.src = data.generalData[0].serverBanner

            let hostName = document.getElementById("hostName")
            let playerCount = document.getElementById("playerCount")
            let endpoint = document.getElementById("endpoint")

            hostName.innerText = data.generalData[0].serverHostname
            endpoint.innerText = data.generalData[0].serverEndpoint
            playerCount.innerText = "" + data.playerData.length + " / " + data.generalData[0].serverMax

            let ownerAvatar = document.getElementById("ownerAvatar")
            let ownerName = document.getElementById("ownerName")
            let ownerProfile = document.getElementById("ownerProfile")

            ownerAvatar.src = data.generalData[1].ownerAvatar
            ownerName.innerText = data.generalData[1].owner
            ownerProfile.innerText = data.generalData[1].owner
            ownerProfile.href = data.generalData[1].ownerProfileURL

            let playerList = document.getElementById("playerList");
            playerList.innerHTML = ``
            data.playerData.map(x => {
                playerList.innerHTML += `
                <li class="bigBoxListItem">
                    <div class="player">
                        <p>Name: ${x[0]}</p>
                        <p>ID: ${x[1]}</p>
                        <p>Ping: ${x[2]}</p>
                    </div>
                    <div class="discord">
                        <img src=${x[3]} alt="">
                        <div class="right">
                            <p>Tag: ${x[4]}</p>
                            <p>ID: ${x[5]}</p>
                        </div>
                    </div>
                    <div class="steam">
                        <img src=${x[9]} alt="">
                        <div class="right">
                            <p>Tag: <a href=${x[8]}>${x[7]}</a></p>
                            <p>ID: ${x[6]}</p>
                        </div>
                    </div>
                </li>
                `
            })
        }

        const serverData = (data) => {
            const serverBanner = data.vars.banner_detail
            const serverMax = data.vars.sv_maxClients
            const serverLabel = data.vars.sv_projectName
            const serverEndpoint = data.connectEndPoints[0]
            const serverHostname = data.hostname
            generalData.push({
                serverBanner: serverBanner,
                serverMax: serverMax,
                serverLabel: serverLabel,
                serverEndpoint: serverEndpoint,
                serverHostname: serverHostname
            })
        }

        const ownerData = (data) => {
            const owner = data.ownerName
            const ownerProfileURL = data.ownerProfile
            const ownerAvatar = data.ownerAvatar
            generalData.push({
                owner: owner,
                ownerProfileURL: ownerProfileURL,
                ownerAvatar: ownerAvatar
            })
        }

        const playersData = async (players) => {
            for (let x = 0; x < players.length; x++) {
                playerData[x] = []

                const player = players[x]
                const playerName = player.name
                const playerID = player.id
                const playerPing = player.ping

                playerData[x].push(playerName, playerID, playerPing)

                const identifierList = players[x].identifiers
                for (let y = 0; y < identifierList.length; y++) {
                    const identifier = identifierList[y]

                    const selectDCIdentifier = identifier.substr(0, 7)
                    if (selectDCIdentifier === "discord") {
                        const selectedDCIdentifier = identifier.slice(8)
                        await fetchDiscordData(x, selectedDCIdentifier)
                    }

                    const selectSteamIdentifier = identifier.substr(0, 5)
                    if (selectSteamIdentifier === "steam") {
                        const selectedSteamIdentifier = identifier.slice(6)
                        const steamDec = hexToDec(selectedSteamIdentifier)
                        await fetchSteamData(x, steamDec)
                    }
                }
            }
        }

        const fetchDiscordData = (index, value) => {
            let data = {id: value}
            fetch("/api/discord", {
                method: "POST",
                headers: {'Content-Type': 'application/json'}, 
                body: JSON.stringify(data)
            })
            .then((res) => {
                return res.json();
            })
            .then((data) => {
                const discordAvatar = `https://cdn.discordapp.com/avatars/${data.id}/${data.avatar}.png`
                const discordTag = `${data.username + "#" + data.discriminator}`
                const discordID = data.id

                setTimeout(() => {
                    playerData[index].push(discordAvatar, discordTag, discordID)
                }, 500)
            })
        }

        const fetchSteamData = (index, value) => {
            let data = {id: value}
            fetch("/api/steam", {
                method: "POST",
                headers: {'Content-Type': 'application/json'}, 
                body: JSON.stringify(data)
            })
            .then((res) => {
                return res.json();
            })
            .then((data) => {
                const steamID = data.steamid
                const steamTag = data.personaname
                const steamProfileURL = data.profileurl
                const steamAvatar = data.avatarfull

                setTimeout(() => {
                    playerData[index].push(steamID, steamTag, steamProfileURL, steamAvatar)
                }, 1000)
            })
        }

        function hexToDec(s) {
            var i, j, digits = [0], carry;
            for (i = 0; i < s.length; i += 1) {
                carry = parseInt(s.charAt(i), 16);
                for (j = 0; j < digits.length; j += 1) {
                    digits[j] = digits[j] * 16 + carry;
                    carry = digits[j] / 10 | 0;
                    digits[j] %= 10;
                }
                while (carry > 0) {
                    digits.push(carry % 10);
                    carry = carry / 10 | 0;
                }
            }
            return digits.reverse().join('');
        }
    </script>
</html>